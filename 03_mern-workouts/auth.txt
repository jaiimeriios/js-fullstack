Steps to create Auth Sessions

BACKEND:

server: set up routes to /login & /signup - app.use('/', ROUTENAME);
routes: make routes for /login & /register and call functions from controller - exports to server
controller: set up POST functions to update to DB {mongoose}, set up a token {jwt} to sent to frontend - exports to routes. import MODEL to user Schema to update DB
model: set up Schema {mongoose} values sent to DB, create static methods to validate and encrypt {validator & bcrypt} data - exports to controller

Protected Routes - /middleware/require.js
set authentication headers and validate if user is logged in
add middleware to routes to check before any route

ASSIGN PERSONAL DATA - 
Model: add user_id to add ID from user that created the task
Controller: (POST) get the const for user_id from the request, and add it to the Create Function. (GET) get the user_id and set mongoose to return ones with matching id 

server <- route <- controller <- model

npm packages: bcrypt, dotenv, express, jsonwebtoken, mongoose, nodemon, validator



FRONTEND:

CONTEXT & REDUCER - /context/AuthContext.jsx
create Auth Context "createContext()" - contains the Context Provider, initial state for loged user and provides the data to Components wrapped in it; Reducer function (used by the Context) handles cases for Login & Logout. exports to useContext hook

HOOK CONTEXT - /hooks/useAuthContext.jsx
useContext hook gets the context from authContext and returs the context to Components that need access to the context - returs dispatch and data (set up on the reducer object const)

INDEX - index.js
wrap all components with the ContextProvider - import from /context/authContext

App.js - App.js
Create routes {react router} for /login & /signup - import Components
routing: set user routed if loggedin/out with authContext

POST HOOK - /hooks/useLogin.jsx & /hooks/useSignup.jsx
set up hook to sent POST request and hadle validatio, error and loading states. Import 'dispatch' function from Context, update the Context with dispatch by setting the case and updated data. Add user data tokes {jwt} from server response to LocalStorage

HOOK LOGOUT - /hooks/useLogout.jsx
set up hook to remove user from LocalStorage. import useContext hook to 'dispatch' case for LOGOUT, which set the user to null. export to where the signout functionallity has to happen
clear all data on logout so it does not show when another user loigns

PAGES - /pages/Login.jsx & /pages/signup.jsx
Make form with inputs matching Schema, on submit user Login || Signup hook

COMPONETS - /components/header.jsx
Set up navLinks {react-router} to point to Login, Signin & logout. import AuthContext to check once user has login and switch nav menu depending if loged IN or OUT. import useLogout hook to signout after user has logged in.

FETCHING - /components/header.jsx, components/WorkoutForm.jsx, components/WorkoutsDetails.js
bring UserAuthContext, add headers to to verify authorization from JWT token. Prevent functions to run if user is not logged in

PROTECTED ROUTES -  App.js
routing: set user routed if loggedin/out with authContext

ASSIGN PERSONAL DATA - 


npm packages
    react, react-router, date-fns